{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "사용자 인증 시스템 구현",
        "description": "Spring Security와 JWT를 활용한 사용자 회원가입, 로그인, 권한 관리 시스템 구현",
        "details": "Spring Boot 3.4.1, Java 17 환경에서 사용자 인증 시스템을 구현합니다. User, UserProfile 엔티티를 생성하고 UserRole enum(CUSTOMER, GARAGE_STAFF, GARAGE_ADMIN, SYSTEM_ADMIN)을 정의합니다. BCrypt를 사용한 비밀번호 암호화, JWT 토큰 기반 인증, 휴대폰 인증 기능을 포함합니다. PostgreSQL 데이터베이스에 users, user_profiles 테이블을 생성하고 필요한 인덱스를 설정합니다. AuthController에서 /api/auth/register, /api/auth/login, /api/auth/refresh, /api/auth/logout, /api/auth/verify-phone API를 구현하고, UserController에서 프로필 관리 API를 구현합니다.",
        "testStrategy": "UserService, AuthService의 단위 테스트를 작성하고, 회원가입/로그인 API 통합 테스트를 수행합니다. JWT 토큰 검증, 권한 체크 보안 테스트를 포함하여 코드 커버리지 80% 이상을 달성합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 스키마 설계 및 생성",
            "description": "사용자 인증 시스템을 위한 PostgreSQL 데이터베이스 테이블 설계 및 생성",
            "dependencies": [],
            "details": "users, user_profiles 테이블을 설계하고 생성합니다. 필요한 컬럼(id, username, email, password_hash, phone_number, role, created_at, updated_at 등)을 정의하고, 성능 최적화를 위한 인덱스(email, phone_number, username)를 설정합니다. 외래키 제약조건과 데이터 무결성을 위한 체크 제약조건을 추가합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "엔티티 및 Enum 클래스 구현",
            "description": "User, UserProfile JPA 엔티티와 UserRole enum 클래스 구현",
            "dependencies": [
              "1.1"
            ],
            "details": "User 엔티티(id, username, email, passwordHash, phoneNumber, role, createdAt, updatedAt)와 UserProfile 엔티티(id, userId, firstName, lastName, profileImage, bio)를 구현합니다. UserRole enum(CUSTOMER, GARAGE_STAFF, GARAGE_ADMIN, SYSTEM_ADMIN)을 정의하고, JPA 어노테이션(@Entity, @Table, @Column, @Enumerated 등)을 적용합니다. 엔티티 간 연관관계(@OneToOne)를 설정합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Spring Security 설정 및 JWT 토큰 관리",
            "description": "Spring Security 보안 설정과 JWT 토큰 생성/검증 로직 구현",
            "dependencies": [
              "1.2"
            ],
            "details": "SecurityConfig 클래스에서 HTTP 보안 설정, CORS 설정, 인증/인가 규칙을 구성합니다. JwtTokenProvider 클래스에서 JWT 토큰 생성, 검증, 파싱 로직을 구현하고, JwtAuthenticationFilter에서 요청별 토큰 검증을 처리합니다. BCryptPasswordEncoder를 사용한 비밀번호 암호화 설정과 CustomUserDetailsService를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "사용자 서비스 로직 구현",
            "description": "UserService, AuthService 비즈니스 로직 구현",
            "dependencies": [
              "1.3"
            ],
            "details": "UserService에서 사용자 CRUD 작업, 프로필 관리, 권한 검증 로직을 구현합니다. AuthService에서 회원가입, 로그인, 토큰 갱신, 로그아웃, 휴대폰 인증 로직을 구현합니다. UserRepository, UserProfileRepository 인터페이스를 정의하고, 비밀번호 암호화, 중복 검증, 토큰 관리 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "인증 및 사용자 관리 API 구현",
            "description": "AuthController, UserController REST API 엔드포인트 구현",
            "dependencies": [
              "1.4"
            ],
            "details": "AuthController에서 POST /api/auth/register(회원가입), POST /api/auth/login(로그인), POST /api/auth/refresh(토큰 갱신), POST /api/auth/logout(로그아웃), POST /api/auth/verify-phone(휴대폰 인증) API를 구현합니다. UserController에서 GET /api/users/profile(프로필 조회), PUT /api/users/profile(프로필 수정), PUT /api/users/password(비밀번호 변경) API를 구현합니다. 요청/응답 DTO 클래스와 유효성 검증을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "단위 테스트 및 통합 테스트 작성",
            "description": "사용자 인증 시스템의 단위 테스트와 통합 테스트 구현",
            "dependencies": [
              "1.5"
            ],
            "details": "UserService, AuthService의 단위 테스트를 작성하여 비즈니스 로직을 검증합니다. AuthController, UserController의 통합 테스트를 작성하여 API 엔드포인트를 테스트합니다. JWT 토큰 생성/검증, 권한 체크, 비밀번호 암호화 등의 보안 기능 테스트를 포함합니다. MockMvc를 사용한 API 테스트와 TestContainers를 활용한 데이터베이스 통합 테스트를 구현하여 코드 커버리지 80% 이상을 달성합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "차량 관리 시스템 구현",
        "description": "사용자별 차량 등록, 관리, 정비 이력 추적 시스템 구현",
        "details": "Vehicle, VehicleHistory 엔티티를 생성하고 EngineType enum(GASOLINE, DIESEL, HYBRID, ELECTRIC)을 정의합니다. MyBatis를 사용하여 vehicles, vehicle_histories 테이블과 매핑하고, 차량 소유권 검증 로직을 구현합니다. VehicleController에서 /api/vehicles CRUD API와 정비 이력 조회, 주행거리 업데이트 API를 구현합니다. 차량 사진 업로드 기능과 기본 차량 설정 기능을 포함합니다.",
        "testStrategy": "VehicleService CRUD 로직 단위 테스트, 차량 등록/조회 API 통합 테스트, 차량 소유권 검증 비즈니스 로직 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 스키마 설계 및 테이블 생성",
            "description": "차량 관리를 위한 vehicles, vehicle_histories 테이블 스키마를 설계하고 생성합니다. 필요한 인덱스와 제약조건을 설정합니다.",
            "dependencies": [],
            "details": "vehicles 테이블(id, user_id, make, model, year, engine_type, license_plate, mileage, created_at, updated_at)과 vehicle_histories 테이블(id, vehicle_id, service_type, description, cost, service_date, mileage, created_at) 스키마를 정의합니다. user_id, vehicle_id에 대한 외래키 제약조건과 성능 최적화를 위한 인덱스를 생성합니다. PostgreSQL 데이터베이스에 테이블을 생성하고 초기 데이터 마이그레이션 스크립트를 작성합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "엔티티 클래스 및 MyBatis 매퍼 구현",
            "description": "Vehicle, VehicleHistory 엔티티 클래스와 EngineType enum을 생성하고 MyBatis 매퍼를 구현합니다.",
            "dependencies": [
              "2.1"
            ],
            "details": "Vehicle 엔티티(id, userId, make, model, year, engineType, licensePlate, mileage, photos, createdAt, updatedAt)와 VehicleHistory 엔티티를 생성합니다. EngineType enum(GASOLINE, DIESEL, HYBRID, ELECTRIC)을 정의합니다. VehicleMapper, VehicleHistoryMapper 인터페이스와 XML 매퍼 파일을 작성하여 CRUD 쿼리를 구현합니다. 차량 소유권 검증을 위한 쿼리와 정비 이력 조회 쿼리를 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "차량 CRUD API 및 비즈니스 로직 구현",
            "description": "VehicleService와 VehicleController를 구현하여 차량 등록, 조회, 수정, 삭제 API와 정비 이력 관리 기능을 구현합니다.",
            "dependencies": [
              "2.2"
            ],
            "details": "VehicleService에서 차량 CRUD 로직, 소유권 검증, 주행거리 업데이트, 정비 이력 추가/조회 기능을 구현합니다. VehicleController에서 /api/vehicles POST(등록), GET(목록/상세조회), PUT(수정), DELETE(삭제) API를 구현합니다. /api/vehicles/{id}/histories GET(정비이력조회), /api/vehicles/{id}/mileage PUT(주행거리업데이트) API를 추가로 구현합니다. 사용자별 차량 목록 조회와 차량 소유권 검증 로직을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "차량 사진 업로드 및 파일 관리 기능 구현",
            "description": "차량 사진 업로드, 저장, 조회 기능과 파일 관리 시스템을 구현합니다.",
            "dependencies": [
              "2.3"
            ],
            "details": "FileUploadService를 구현하여 차량 사진 업로드, 파일 검증, 리사이징 기능을 구현합니다. 지원 파일 형식(JPG, PNG, WEBP) 검증과 파일 크기 제한을 설정합니다. /api/vehicles/{id}/photos POST(사진업로드), GET(사진조회), DELETE(사진삭제) API를 구현합니다. 차량당 최대 사진 개수 제한과 썸네일 생성 기능을 포함합니다. 파일 저장 경로 관리와 중복 파일명 처리 로직을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "차량 관리 시스템 테스트 작성",
            "description": "차량 관리 기능에 대한 단위 테스트와 통합 테스트를 작성합니다.",
            "dependencies": [
              "2.3",
              "2.4"
            ],
            "details": "VehicleService의 CRUD 로직, 소유권 검증, 주행거리 업데이트 기능에 대한 단위 테스트를 작성합니다. VehicleController의 차량 등록/조회/수정/삭제 API 통합 테스트를 구현합니다. 정비 이력 관리 기능과 파일 업로드 기능에 대한 테스트를 포함합니다. 차량 소유권 검증 실패 케이스와 잘못된 파일 업로드 케이스에 대한 예외 처리 테스트를 작성합니다. MockMvc를 사용한 API 테스트와 TestContainers를 활용한 데이터베이스 통합 테스트를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "정비소 관리 시스템 구현",
        "description": "정비소 정보 관리, 운영시간, 서비스 항목, 정비사 관리 시스템 구현",
        "details": "Garage, GarageOperatingHours, GarageService, Mechanic 엔티티를 생성하고 GarageStatus enum을 정의합니다. 정비소 위치 기반 검색을 위한 위도/경도 필드와 인덱스를 설정합니다. GarageController에서 정비소 검색(/api/garages), 상세 조회, 서비스 목록, 정비사 목록 API를 구현합니다. 정비소 사업자용 관리 API(등록, 수정, 서비스/정비사 관리)를 별도로 구현합니다. 평점 및 리뷰 수 집계 기능을 포함합니다.",
        "testStrategy": "정비소 검색 로직 단위 테스트, 위치 기반 검색 API 통합 테스트, 정비소 관리 권한 검증 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "정비소 관련 엔티티 및 데이터베이스 설계",
            "description": "Garage, GarageOperatingHours, GarageService, Mechanic 엔티티 생성 및 GarageStatus enum 정의, PostgreSQL 테이블 스키마 설계",
            "dependencies": [],
            "details": "Garage 엔티티에 위도/경도 필드 포함, GarageOperatingHours로 운영시간 관리, GarageService로 제공 서비스 관리, Mechanic으로 정비사 정보 관리. GarageStatus enum(ACTIVE, INACTIVE, PENDING, SUSPENDED) 정의. 테이블 간 외래키 관계 설정 및 필요한 인덱스 생성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "위치 기반 검색 기능 구현",
            "description": "정비소 위치 기반 검색을 위한 지리적 인덱스 설정 및 거리 계산 로직 구현",
            "dependencies": [
              "3.1"
            ],
            "details": "위도/경도 필드에 공간 인덱스(Spatial Index) 설정, Haversine 공식을 사용한 거리 계산 로직 구현, 반경 내 정비소 검색 쿼리 최적화, PostGIS 확장 활용 검토",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "정비소 검색 및 조회 API 구현",
            "description": "고객용 정비소 검색, 상세 조회, 서비스 목록, 정비사 목록 API 구현",
            "dependencies": [
              "3.2"
            ],
            "details": "GarageController에서 /api/garages 검색 API(위치, 서비스 타입, 평점 필터링), /api/garages/{id} 상세 조회, /api/garages/{id}/services 서비스 목록, /api/garages/{id}/mechanics 정비사 목록 API 구현. 페이징 및 정렬 기능 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "정비소 사업자용 관리 API 구현",
            "description": "정비소 등록, 수정, 서비스 관리, 정비사 관리를 위한 사업자 전용 API 구현",
            "dependencies": [
              "3.1"
            ],
            "details": "GarageManagementController에서 정비소 등록(/api/garage-management/register), 정보 수정, 운영시간 관리, 서비스 추가/삭제/수정, 정비사 등록/관리 API 구현. GARAGE_ADMIN 권한 검증 및 소유권 확인 로직 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "평점 및 리뷰 집계 기능 구현",
            "description": "정비소별 평점 계산, 리뷰 수 집계 및 통계 데이터 생성 기능 구현",
            "dependencies": [
              "3.1"
            ],
            "details": "정비소별 평균 평점 계산 로직, 리뷰 수 집계, 평점 분포 통계 생성. 배치 작업을 통한 정기적 집계 업데이트, 실시간 평점 반영 로직 구현. 캐싱을 통한 성능 최적화 적용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "정비소 관리 시스템 테스트 작성",
            "description": "정비소 검색, 위치 기반 검색, 관리 권한 검증에 대한 단위 테스트 및 통합 테스트 작성",
            "dependencies": [
              "3.3",
              "3.4",
              "3.5"
            ],
            "details": "GarageService 단위 테스트, 위치 기반 검색 로직 테스트, 정비소 CRUD API 통합 테스트, 권한별 접근 제어 테스트, 평점 집계 로직 테스트 작성. 코드 커버리지 80% 이상 달성",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "예약 시스템 구현",
        "description": "정비 예약 생성, 관리, 상태 추적 및 예약 가능 시간 관리 시스템 구현",
        "details": "Reservation, AvailableSlot 엔티티를 생성하고 ReservationStatus, UrgencyLevel enum을 정의합니다. 예약 번호 자동 생성 로직과 예약 가능 시간 검증 로직을 구현합니다. ReservationController에서 예약 CRUD API와 진행상황 조회 API를 구현하고, 정비소용 예약 관리 API를 별도로 구현합니다. 예약 충돌 방지를 위한 동시성 제어와 예약 상태 변경 시 알림 발송 로직을 포함합니다.",
        "testStrategy": "예약 생성/수정 로직 단위 테스트, 예약 가능 시간 검증 테스트, 예약 상태 변경 API 통합 테스트, 동시성 제어 테스트를 수행합니다.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "예약 시스템 데이터베이스 설계 및 엔티티 구현",
            "description": "Reservation, AvailableSlot 엔티티와 ReservationStatus, UrgencyLevel enum을 생성하고 PostgreSQL 테이블 스키마를 설계합니다.",
            "dependencies": [],
            "details": "Reservation 엔티티(예약번호, 고객ID, 정비소ID, 예약일시, 상태, 긴급도, 차량정보, 요청사항)와 AvailableSlot 엔티티(정비소ID, 날짜, 시간대, 예약가능여부)를 JPA로 구현합니다. ReservationStatus(PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED), UrgencyLevel(LOW, MEDIUM, HIGH, URGENT) enum을 정의하고 데이터베이스 테이블과 인덱스를 생성합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "예약 번호 생성 및 시간 검증 로직 구현",
            "description": "예약 번호 자동 생성 로직과 예약 가능 시간 검증 로직을 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "날짜와 순번 기반 예약번호 생성 로직(RES-YYYYMMDD-XXXX 형식)을 구현하고, 예약 요청 시간과 정비소 운영시간 검증, 기존 예약과의 시간 충돌 검사, 예약 가능한 슬롯 조회 로직을 ReservationService에 구현합니다. 정비소별 예약 규칙(최소/최대 예약 간격, 동시 예약 제한)을 적용합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "예약 충돌 방지 및 동시성 제어 구현",
            "description": "예약 시간 충돌 방지를 위한 동시성 제어 메커니즘을 구현합니다.",
            "dependencies": [
              "4.2"
            ],
            "details": "Redis를 활용한 분산 락 구현으로 동일 시간대 예약 요청의 동시성을 제어하고, 낙관적 락(Optimistic Locking)을 통한 예약 상태 변경 충돌 방지, 예약 생성 시 트랜잭션 격리 수준 설정, 예약 가능 슬롯의 원자적 업데이트를 구현합니다. 동시 예약 요청 시 대기열 관리 로직을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "예약 상태 관리 및 워크플로우 구현",
            "description": "예약 상태 변경 워크플로우와 상태별 비즈니스 로직을 구현합니다.",
            "dependencies": [
              "4.1"
            ],
            "details": "예약 상태 전이 규칙(PENDING→CONFIRMED→IN_PROGRESS→COMPLETED, 취소 처리)을 정의하고, 상태 변경 시 검증 로직과 자동 상태 업데이트(예약 시간 경과 시 자동 진행), 예약 취소 정책(취소 가능 시간, 취소 수수료) 적용, 예약 만료 처리 배치 작업을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "예약 관리 API 구현",
            "description": "고객용 예약 CRUD API와 정비소용 예약 관리 API를 구현합니다.",
            "dependencies": [
              "4.2",
              "4.4"
            ],
            "details": "ReservationController에서 예약 생성(/api/reservations), 예약 조회(/api/reservations/{id}), 예약 수정(/api/reservations/{id}), 예약 취소(/api/reservations/{id}/cancel) API를 구현합니다. 정비소용 예약 목록 조회, 예약 승인/거부, 진행상황 업데이트 API와 예약 가능 시간 조회(/api/reservations/available-slots) API를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "예약 알림 연동 및 이벤트 처리 구현",
            "description": "예약 상태 변경 시 알림 발송과 이벤트 기반 처리 로직을 구현합니다.",
            "dependencies": [
              "4.4"
            ],
            "details": "Spring Events를 활용한 예약 상태 변경 이벤트 발행, 예약 생성/확정/취소 시 고객 및 정비소 알림 발송, 예약 리마인더 알림(예약 1일 전, 2시간 전), 예약 지연 알림 처리를 구현합니다. 알림 발송 실패 시 재시도 로직과 알림 템플릿 기반 메시지 생성을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "예약 시스템 테스트 작성",
            "description": "예약 시스템의 단위 테스트, 통합 테스트, 동시성 테스트를 작성합니다.",
            "dependencies": [
              "4.3",
              "4.5",
              "4.6"
            ],
            "details": "ReservationService의 예약 생성/수정/취소 로직 단위 테스트, 예약 가능 시간 검증 테스트, 동시성 제어 테스트(동일 시간대 다중 예약 요청), 예약 상태 변경 워크플로우 테스트를 작성합니다. 예약 API 통합 테스트, 알림 발송 테스트, 성능 테스트(대량 예약 처리)를 포함하여 80% 이상의 코드 커버리지를 달성합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "견적 관리 시스템 구현",
        "description": "견적서 생성, 관리, 승인/거부 프로세스 및 견적 항목 관리 시스템 구현",
        "details": "Quote, QuoteItem 엔티티를 생성하고 QuoteStatus, ItemType enum을 정의합니다. 견적 번호 자동 생성, 세금 계산, 할인 적용 로직을 구현합니다. QuoteController에서 견적서 CRUD API와 승인/거부 API를 구현하고, 견적 항목 관리 API를 별도로 구현합니다. 견적 유효기간 관리와 만료 처리 배치 작업을 포함합니다.",
        "testStrategy": "견적 생성/계산 로직 단위 테스트, 견적 승인/거부 프로세스 통합 테스트, 견적 항목 관리 API 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "견적 관리 데이터베이스 설계 및 엔티티 구현",
            "description": "Quote, QuoteItem 엔티티와 QuoteStatus, ItemType enum을 정의하고 데이터베이스 테이블을 생성합니다.",
            "dependencies": [],
            "details": "Quote 엔티티(견적번호, 고객정보, 총액, 세금, 할인, 유효기간, 상태 등)와 QuoteItem 엔티티(항목명, 수량, 단가, 타입 등)를 JPA로 구현합니다. QuoteStatus enum(DRAFT, PENDING, APPROVED, REJECTED, EXPIRED)과 ItemType enum(PARTS, LABOR, SERVICE)을 정의하고, PostgreSQL에 quotes, quote_items 테이블을 생성하며 필요한 인덱스와 외래키 제약조건을 설정합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "견적 계산 로직 및 비즈니스 서비스 구현",
            "description": "견적 번호 자동 생성, 세금 계산, 할인 적용 등의 핵심 비즈니스 로직을 구현합니다.",
            "dependencies": [
              "5.1"
            ],
            "details": "QuoteService에서 견적 번호 자동 생성 로직(날짜 기반 시퀀스), 견적 항목별 금액 계산, 부가세 계산(10%), 할인율 적용 로직을 구현합니다. 견적 총액 계산 메서드, 견적 유효성 검증 로직, 견적 상태 변경 비즈니스 규칙을 포함하여 QuoteCalculationService를 별도로 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "견적서 CRUD API 구현",
            "description": "견적서 생성, 조회, 수정, 삭제 및 견적 항목 관리 REST API를 구현합니다.",
            "dependencies": [
              "5.2"
            ],
            "details": "QuoteController에서 견적서 CRUD API(/api/quotes)를 구현합니다. 견적서 생성(POST), 목록 조회(GET), 상세 조회(GET /{id}), 수정(PUT /{id}), 삭제(DELETE /{id}) API와 견적 항목 관리 API(/api/quotes/{id}/items)를 구현합니다. 페이징, 정렬, 검색 기능과 견적서 PDF 생성 API를 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "견적 승인/거부 프로세스 구현",
            "description": "견적서 승인 및 거부 처리 워크플로우와 관련 API를 구현합니다.",
            "dependencies": [
              "5.3"
            ],
            "details": "견적 승인/거부 API(/api/quotes/{id}/approve, /api/quotes/{id}/reject)를 구현하고, 승인자 권한 검증 로직을 추가합니다. 승인/거부 시 상태 변경, 승인일시 기록, 승인자 정보 저장 기능을 구현하며, 승인/거부 사유 입력 및 이력 관리 기능을 포함합니다. 견적 상태별 접근 권한 제어 로직을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "견적 유효기간 관리 배치 작업 및 테스트 구현",
            "description": "견적 만료 처리 배치 작업을 구현하고 견적 관리 시스템 전체 테스트를 수행합니다.",
            "dependencies": [
              "5.4"
            ],
            "details": "Spring Batch를 사용하여 견적 유효기간 만료 처리 배치 작업을 구현합니다. 매일 자정에 실행되는 스케줄러로 만료된 견적을 EXPIRED 상태로 변경하고, 만료 알림 발송 기능을 포함합니다. 견적 생성/계산 로직 단위 테스트, 견적 승인/거부 프로세스 통합 테스트, 견적 항목 관리 API 테스트, 배치 작업 테스트를 구현하여 80% 이상의 코드 커버리지를 달성합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "정비 프로세스 시스템 구현",
        "description": "정비 진행 단계 관리 및 실시간 상태 추적 시스템 구현",
        "details": "MaintenanceProcess, MaintenanceStageLog 엔티티를 생성하고 MaintenanceStage enum(RECEIVED, DIAGNOSING, QUOTE_PENDING, IN_PROGRESS, QUALITY_CHECK, COMPLETED)을 정의합니다. 진행률 계산 로직과 단계별 소요시간 추적 기능을 구현합니다. MaintenanceController에서 진행상황 조회, 타임라인 API와 정비소용 단계 업데이트, 코멘트/사진 업로드 API를 구현합니다. 각 단계 변경 시 고객 알림 발송 로직을 포함합니다.",
        "testStrategy": "정비 단계 변경 로직 단위 테스트, 진행상황 추적 API 통합 테스트, 타임라인 생성 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "정비 프로세스 데이터베이스 설계 및 엔티티 구현",
            "description": "MaintenanceProcess, MaintenanceStageLog 엔티티 생성 및 MaintenanceStage enum 정의",
            "dependencies": [],
            "details": "MaintenanceProcess 엔티티(정비 ID, 차량 ID, 정비소 ID, 현재 단계, 시작일, 예상 완료일, 총 진행률)와 MaintenanceStageLog 엔티티(로그 ID, 정비 ID, 단계, 시작 시간, 종료 시간, 담당자, 코멘트, 사진)를 생성합니다. MaintenanceStage enum(RECEIVED, DIAGNOSING, QUOTE_PENDING, IN_PROGRESS, QUALITY_CHECK, COMPLETED)을 정의하고 PostgreSQL 테이블 스키마를 설계합니다. 단계별 전환 규칙과 제약 조건을 데이터베이스 레벨에서 정의합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "정비 단계별 상태 관리 로직 구현",
            "description": "정비 단계 전환 로직 및 상태 머신 구현",
            "dependencies": [
              "6.1"
            ],
            "details": "MaintenanceProcessService에서 단계별 전환 로직을 구현합니다. 각 단계별 유효성 검증, 권한 체크, 필수 입력값 검증을 포함합니다. 단계 변경 시 MaintenanceStageLog 자동 생성 로직과 이전 단계로의 롤백 기능을 구현합니다. 정비소 직원별 권한에 따른 단계 변경 제한 로직과 단계별 필수 작업 완료 체크 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "진행률 계산 및 타임라인 추적 기능 구현",
            "description": "실시간 진행률 계산 로직 및 단계별 소요시간 추적 시스템 구현",
            "dependencies": [
              "6.2"
            ],
            "details": "각 정비 단계별 가중치를 적용한 진행률 계산 알고리즘을 구현합니다. 단계별 예상 소요시간 대비 실제 소요시간 추적 로직과 지연 알림 기능을 구현합니다. 정비 타임라인 생성 로직과 단계별 히스토리 조회 기능을 포함합니다. 정비소별 평균 작업 시간 통계 계산과 예상 완료일 자동 업데이트 기능을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "정비 프로세스 관리 API 구현",
            "description": "MaintenanceController에서 정비 진행상황 관리 API 구현",
            "dependencies": [
              "6.3"
            ],
            "details": "MaintenanceController에서 정비 진행상황 조회 API(/api/maintenance/{id}/status), 타임라인 조회 API(/api/maintenance/{id}/timeline)를 구현합니다. 정비소용 단계 업데이트 API(/api/maintenance/{id}/stage), 코멘트 및 사진 업로드 API(/api/maintenance/{id}/update)를 구현합니다. 고객용 진행상황 조회와 정비소용 상세 관리 기능을 분리하여 구현하고, 실시간 상태 업데이트를 위한 WebSocket 연동을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "알림 연동 및 시스템 테스트",
            "description": "단계 변경 시 고객 알림 발송 로직 구현 및 전체 시스템 테스트",
            "dependencies": [
              "6.4"
            ],
            "details": "각 정비 단계 변경 시 고객에게 자동 알림 발송 로직을 구현합니다. 알림 템플릿 기반 메시지 생성과 이메일, SMS, 푸시 알림 다중 채널 발송을 포함합니다. 정비 프로세스 전체 워크플로우 통합 테스트, 단계별 상태 전환 테스트, 진행률 계산 정확성 테스트를 수행합니다. API 성능 테스트와 동시성 처리 테스트, 알림 발송 실패 시 재시도 로직 테스트를 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "결제 시스템 구현",
        "description": "결제 처리, 영수증 발행, 환불 관리 및 PG사 연동 시스템 구현",
        "details": "Payment 엔티티를 생성하고 PaymentMethod, PaymentStatus enum을 정의합니다. 결제 번호 자동 생성과 PG사 연동을 위한 트랜잭션 ID 관리 로직을 구현합니다. PaymentController에서 결제 요청, 상세 조회, 환불 요청 API와 PG사 웹훅 처리 API를 구현합니다. 영수증 생성 및 조회 기능, 부분 환불 처리 로직을 포함합니다. 결제 실패 시 재시도 메커니즘과 결제 상태 동기화 배치 작업을 구현합니다.",
        "testStrategy": "결제 처리 로직 단위 테스트, PG사 웹훅 처리 통합 테스트, 환불 프로세스 테스트, 결제 상태 동기화 테스트를 수행합니다.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "결제 데이터베이스 설계 및 엔티티 구현",
            "description": "Payment, PaymentHistory, Receipt 엔티티 생성 및 PaymentMethod, PaymentStatus enum 정의, 데이터베이스 테이블 설계 및 인덱스 최적화",
            "dependencies": [],
            "details": "Payment 엔티티에 결제 번호, 금액, 상태, PG사 트랜잭션 ID 등 필드를 정의하고, PaymentMethod enum(CARD, BANK_TRANSFER, VIRTUAL_ACCOUNT), PaymentStatus enum(PENDING, COMPLETED, FAILED, CANCELLED, REFUNDED) 구현. payments, payment_histories, receipts 테이블 생성 및 성능 최적화를 위한 인덱스 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "PG사 연동 모듈 구현",
            "description": "외부 PG사 API 연동을 위한 PaymentGateway 인터페이스 및 구현체 개발, 결제 요청/응답 처리 로직 구현",
            "dependencies": [
              "7.1"
            ],
            "details": "PaymentGateway 인터페이스 정의 및 주요 PG사(토스페이먼츠, 아임포트 등) 구현체 개발. 결제 승인, 취소, 조회 API 호출 로직과 응답 데이터 파싱, 에러 처리, 타임아웃 설정 구현. PG사별 설정 관리 및 동적 PG사 선택 로직 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "결제 처리 비즈니스 로직 구현",
            "description": "PaymentService에서 결제 요청, 승인, 실패 처리 로직 및 결제 번호 자동 생성, 재시도 메커니즘 구현",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "결제 요청 검증, 중복 결제 방지, 결제 번호 자동 생성(UUID 기반) 로직 구현. 결제 실패 시 최대 3회 재시도 메커니즘과 지수 백오프 적용. 결제 상태 변경 이력 관리 및 트랜잭션 처리 보장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "환불 관리 시스템 구현",
            "description": "전체/부분 환불 처리 로직, 환불 승인 워크플로우 및 환불 이력 관리 기능 구현",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3"
            ],
            "details": "RefundService에서 전체 환불, 부분 환불 처리 로직 구현. 환불 가능 금액 계산, 환불 승인 프로세스, 환불 상태 추적 기능. 환불 요청 검증, PG사 환불 API 호출, 환불 완료 처리 및 알림 발송 로직 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "결제 API 및 웹훅 처리 구현",
            "description": "PaymentController에서 결제 관련 REST API 구현 및 PG사 웹훅 처리 엔드포인트 개발",
            "dependencies": [
              "7.3",
              "7.4"
            ],
            "details": "결제 요청(/api/payments), 결제 상세 조회(/api/payments/{id}), 환불 요청(/api/payments/{id}/refund) API 구현. PG사 웹훅 처리(/api/payments/webhook) 엔드포인트에서 결제 상태 동기화, 서명 검증, 중복 처리 방지 로직 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "영수증 생성 및 배치 작업 구현",
            "description": "영수증 자동 생성, PDF 변환 기능 및 결제 상태 동기화 배치 작업 구현",
            "dependencies": [
              "7.3",
              "7.4"
            ],
            "details": "ReceiptService에서 영수증 데이터 생성, PDF 변환(iText 라이브러리 사용), 영수증 조회 API 구현. 결제 상태 동기화 배치 작업(@Scheduled)으로 PG사와 시스템 간 상태 불일치 해결 및 미처리 결제 재처리 로직 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "결제 시스템 보안 및 테스트 구현",
            "description": "결제 데이터 암호화, 보안 검증 로직 구현 및 결제 시스템 전체 테스트 수행",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3",
              "7.4",
              "7.5",
              "7.6"
            ],
            "details": "결제 정보 AES 암호화, API 요청 서명 검증, CSRF 보호 구현. 결제 처리 로직 단위 테스트, PG사 웹훅 처리 통합 테스트, 환불 프로세스 테스트, 결제 상태 동기화 테스트 수행. 부하 테스트 및 보안 취약점 점검 포함",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "리뷰 평점 시스템 구현",
        "description": "고객 리뷰 작성, 정비소 답글, 평점 관리 및 도움이 되었나요 기능 구현",
        "details": "Review, ReviewReply, ReviewHelpful 엔티티를 생성하고 ReviewStatus enum을 정의합니다. 평점 집계 로직과 정비소별 평균 평점 계산 기능을 구현합니다. ReviewController에서 리뷰 CRUD API, 답글 작성, 도움이 되었나요 기능 API를 구현합니다. 익명 리뷰 처리, 리뷰 사진 업로드, 부적절한 리뷰 신고 기능을 포함합니다. 리뷰 작성 시 정비소 평점 업데이트 로직을 구현합니다.",
        "testStrategy": "리뷰 작성/수정 로직 단위 테스트, 평점 집계 계산 테스트, 리뷰 답글 API 통합 테스트, 익명 처리 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "리뷰 시스템 데이터베이스 설계 및 엔티티 구현",
            "description": "Review, ReviewReply, ReviewHelpful 엔티티와 ReviewStatus enum을 생성하고 PostgreSQL 테이블 구조를 설계합니다.",
            "dependencies": [],
            "details": "Review 엔티티(id, userId, garageId, rating, content, isAnonymous, status, createdAt, updatedAt), ReviewReply 엔티티(id, reviewId, garageId, content, createdAt), ReviewHelpful 엔티티(id, reviewId, userId, isHelpful, createdAt), ReviewStatus enum(ACTIVE, REPORTED, DELETED) 정의. reviews, review_replies, review_helpful 테이블 생성 및 인덱스 설정. MyBatis 매퍼 인터페이스 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "리뷰 CRUD 및 답글 기능 API 구현",
            "description": "ReviewController에서 리뷰 작성, 조회, 수정, 삭제 API와 정비소 답글 작성 기능을 구현합니다.",
            "dependencies": [
              "8.1"
            ],
            "details": "POST /api/reviews (리뷰 작성), GET /api/reviews (리뷰 목록 조회), PUT /api/reviews/{id} (리뷰 수정), DELETE /api/reviews/{id} (리뷰 삭제), POST /api/reviews/{id}/reply (답글 작성), GET /api/reviews/{id}/replies (답글 조회) API 구현. 익명 리뷰 처리 로직, 리뷰 작성 권한 검증, 페이징 처리 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "평점 집계 및 도움이 되었나요 기능 구현",
            "description": "정비소별 평균 평점 계산 로직과 리뷰 도움이 되었나요 기능을 구현합니다.",
            "dependencies": [
              "8.1",
              "8.2"
            ],
            "details": "정비소별 평균 평점 실시간 계산 및 업데이트 로직 구현. POST /api/reviews/{id}/helpful (도움이 되었나요 등록), DELETE /api/reviews/{id}/helpful (도움이 되었나요 취소) API 구현. 평점 집계 배치 작업, 리뷰 통계 조회 기능, 평점 히스토리 관리 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "리뷰 사진 업로드 및 신고 기능 구현",
            "description": "리뷰 사진 업로드 처리와 부적절한 리뷰 신고 기능을 구현합니다.",
            "dependencies": [
              "8.1",
              "8.2"
            ],
            "details": "POST /api/reviews/{id}/photos (리뷰 사진 업로드), DELETE /api/reviews/{id}/photos/{photoId} (사진 삭제), POST /api/reviews/{id}/report (리뷰 신고) API 구현. 이미지 파일 검증, 리사이징, S3 업로드 처리. 신고 처리 워크플로우, 신고된 리뷰 상태 관리, 관리자 검토 기능 포함.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "알림 시스템 구현",
        "description": "실시간 알림, 예약/정비 상태 변경 알림 및 알림 설정 관리 시스템 구현",
        "details": "Notification, NotificationTemplate 엔티티를 생성하고 NotificationType, DeliveryStatus enum을 정의합니다. 알림 템플릿 기반 메시지 생성과 예약된 알림 발송 기능을 구현합니다. NotificationController에서 알림 목록 조회, 읽음 처리, 설정 관리 API를 구현합니다. 이메일, SMS, 푸시 알림 다중 채널 발송과 사용자별 알림 설정 관리 기능을 포함합니다. 배치 작업을 통한 정기 점검 알림과 알림 발송 실패 재시도 로직을 구현합니다.",
        "testStrategy": "알림 생성/발송 로직 단위 테스트, 알림 설정 관리 API 통합 테스트, 다중 채널 발송 테스트, 배치 작업 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "알림 시스템 데이터베이스 설계 및 엔티티 구현",
            "description": "Notification, NotificationTemplate 엔티티와 NotificationType, DeliveryStatus enum을 생성하고 데이터베이스 테이블을 설계합니다.",
            "dependencies": [],
            "details": "Notification 엔티티(id, userId, type, title, content, deliveryStatus, readAt, createdAt), NotificationTemplate 엔티티(id, type, title, content, variables), NotificationType enum(RESERVATION_CONFIRMED, MAINTENANCE_STARTED, MAINTENANCE_COMPLETED, PAYMENT_COMPLETED, INSPECTION_REMINDER), DeliveryStatus enum(PENDING, SENT, DELIVERED, FAILED, RETRY) 정의. PostgreSQL 테이블 생성 및 인덱스 설정.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "알림 템플릿 관리 시스템 구현",
            "description": "템플릿 기반 메시지 생성 로직과 변수 치환 기능을 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "NotificationTemplateService에서 템플릿 CRUD 기능 구현. 템플릿 변수 파싱 및 치환 로직({userName}, {serviceName}, {appointmentDate} 등) 구현. 알림 타입별 기본 템플릿 생성 및 관리 기능. 템플릿 미리보기 및 검증 로직 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "다중 채널 알림 발송 시스템 구현",
            "description": "이메일, SMS, 푸시 알림 다중 채널 발송 기능을 구현합니다.",
            "dependencies": [
              "9.2"
            ],
            "details": "NotificationService에서 채널별 발송 로직 구현. 이메일 발송(JavaMailSender), SMS 발송(외부 API 연동), 푸시 알림(FCM) 기능 구현. 채널별 발송 우선순위 및 실패 시 대체 채널 로직. 발송 상태 추적 및 배치 발송 기능 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "사용자별 알림 설정 관리 구현",
            "description": "사용자별 알림 수신 설정 및 채널별 선호도 관리 기능을 구현합니다.",
            "dependencies": [
              "9.1"
            ],
            "details": "UserNotificationSetting 엔티티 생성(userId, notificationType, emailEnabled, smsEnabled, pushEnabled). 사용자별 알림 설정 CRUD API 구현. 알림 발송 전 사용자 설정 확인 로직. 일괄 설정 변경 및 기본 설정 복원 기능 구현.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "배치 작업 및 예약 알림 시스템 구현",
            "description": "정기 점검 알림, 예약 리마인더 등 배치 작업을 통한 자동 알림 발송 기능을 구현합니다.",
            "dependencies": [
              "9.3",
              "9.4"
            ],
            "details": "Spring Batch를 사용한 정기 알림 배치 작업 구현. 예약 1일 전, 1시간 전 리마인더 알림 스케줄링. 정기 점검 알림(차량 주행거리 기반) 배치 작업. Quartz Scheduler를 사용한 알림 예약 발송 기능. 배치 작업 모니터링 및 로그 관리.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "알림 API 및 실패 처리 로직 구현",
            "description": "NotificationController API 구현과 알림 발송 실패 재시도 로직을 구현합니다.",
            "dependencies": [
              "9.3",
              "9.4",
              "9.5"
            ],
            "details": "NotificationController에서 알림 목록 조회(/api/notifications), 읽음 처리(/api/notifications/{id}/read), 설정 관리(/api/notifications/settings) API 구현. 알림 발송 실패 시 재시도 로직(최대 3회, 지수 백오프). 실패한 알림 수동 재발송 기능. 알림 통계 및 발송 현황 조회 API 구현.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "관리자 시스템 구현",
        "description": "대시보드, 통계, 시스템 관리 및 수익 분석 기능 구현",
        "details": "DashboardStats, SystemLog 엔티티를 생성하고 관리자 권한별 접근 제어를 구현합니다. 일별/월별 통계 집계 로직과 차트 데이터 생성 기능을 구현합니다. AdminController에서 종합 대시보드, 예약/정비소/고객 관리, 수익 분석 API를 구현합니다. 시스템 로그 관리, 상태 모니터링, 공지사항 발송 기능을 포함합니다. 정비소 승인/정지, 고객 계정 관리, 수익 트렌드 분석 기능을 구현하고 관리자별 권한에 따른 기능 접근 제어를 적용합니다.",
        "testStrategy": "통계 집계 로직 단위 테스트, 대시보드 API 통합 테스트, 권한별 접근 제어 테스트, 수익 분석 계산 테스트를 수행합니다.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "관리자 시스템 데이터베이스 설계 및 엔티티 구현",
            "description": "DashboardStats, SystemLog 엔티티와 관련 테이블을 생성하고 관리자 권한 체계를 설계합니다.",
            "dependencies": [],
            "details": "DashboardStats 엔티티(일별/월별 통계 데이터), SystemLog 엔티티(시스템 로그 기록), AdminRole enum(권한 레벨 정의)을 생성합니다. dashboard_stats, system_logs 테이블을 PostgreSQL에 생성하고 필요한 인덱스를 설정합니다. 관리자 권한별 접근 제어를 위한 데이터베이스 스키마를 설계하고 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "통계 집계 로직 및 차트 데이터 생성 기능 구현",
            "description": "일별/월별 통계 집계 로직과 대시보드용 차트 데이터 생성 기능을 구현합니다.",
            "dependencies": [
              "10.1"
            ],
            "details": "예약 건수, 매출, 정비소 활동, 고객 증가율 등의 통계를 일별/월별로 집계하는 로직을 구현합니다. 차트 표시용 JSON 데이터 생성 기능과 통계 데이터 캐싱 로직을 구현합니다. 배치 작업을 통한 정기적인 통계 업데이트 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "관리자 대시보드 API 구현",
            "description": "종합 대시보드와 각종 관리 기능을 위한 AdminController API를 구현합니다.",
            "dependencies": [
              "10.2"
            ],
            "details": "AdminController에서 대시보드 조회(/api/admin/dashboard), 예약 관리(/api/admin/bookings), 정비소 관리(/api/admin/garages), 고객 관리(/api/admin/customers) API를 구현합니다. 수익 분석 API(/api/admin/revenue)와 통계 데이터 조회 API를 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "정비소 및 고객 관리 기능 구현",
            "description": "정비소 승인/정지, 고객 계정 관리, 수익 트렌드 분석 기능을 구현합니다.",
            "dependencies": [
              "10.3"
            ],
            "details": "정비소 승인/거부/정지 처리 로직과 고객 계정 활성화/비활성화 기능을 구현합니다. 수익 트렌드 분석, 정비소별 성과 분석, 고객 행동 분석 기능을 포함합니다. 정비소 등급 관리와 우수 정비소 선정 로직을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "관리자 권한별 접근 제어 시스템 구현",
            "description": "관리자 권한에 따른 기능별 접근 제어와 보안 기능을 구현합니다.",
            "dependencies": [
              "10.4"
            ],
            "details": "관리자 권한별(SYSTEM_ADMIN, MANAGER, OPERATOR) 기능 접근 제어를 구현합니다. Spring Security를 활용한 메소드 레벨 보안과 관리자 활동 로그 기록 기능을 포함합니다. 관리자 계정 관리와 권한 변경 승인 프로세스를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "시스템 모니터링 및 공지사항 관리 기능 구현",
            "description": "시스템 상태 모니터링, 로그 관리, 공지사항 발송 기능을 구현합니다.",
            "dependencies": [
              "10.5"
            ],
            "details": "시스템 로그 수집/분석, 서버 상태 모니터링, 에러 알림 기능을 구현합니다. 공지사항 작성/발송 기능과 긴급 알림 발송 시스템을 포함합니다. 시스템 백업 상태 확인과 데이터베이스 성능 모니터링 기능을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-24T01:53:17.980Z",
      "updated": "2025-09-24T01:53:17.981Z",
      "description": "Tasks for master context"
    }
  }
}