---
globs: **/test/**/*.java
description: 테스트 작성 가이드라인 및 베스트 프랙티스
---

# 테스트 작성 가이드라인

## 테스트 구조
```
src/test/java/com/carcenter/
├── domain/
│   └── {domain}/
│       ├── controller/     # 컨트롤러 테스트
│       ├── service/        # 서비스 단위 테스트
│       └── repository/     # 리포지토리 테스트
└── integration/            # 통합 테스트
```

## 단위 테스트 (Service Layer)
```java
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    
    @Mock
    private UserRepository userRepository;
    
    @InjectMocks
    private UserService userService;
    
    @Test
    @DisplayName("사용자 생성 성공")
    void createUser_Success() {
        // Given
        UserCreateRequest request = new UserCreateRequest("user1", "user1@test.com", "password123");
        User savedUser = User.builder()
                .id(1L)
                .username("user1")
                .email("user1@test.com")
                .build();
        
        when(userRepository.save(any(User.class))).thenReturn(savedUser);
        
        // When
        UserResponse response = userService.createUser(request);
        
        // Then
        assertThat(response.getUsername()).isEqualTo("user1");
        assertThat(response.getEmail()).isEqualTo("user1@test.com");
        verify(userRepository).save(any(User.class));
    }
    
    @Test
    @DisplayName("존재하지 않는 사용자 조회 시 예외 발생")
    void getUser_NotFound_ThrowsException() {
        // Given
        Long userId = 999L;
        when(userRepository.findById(userId)).thenReturn(Optional.empty());
        
        // When & Then
        assertThatThrownBy(() -> userService.getUser(userId))
                .isInstanceOf(UserNotFoundException.class)
                .hasMessage("User not found with id: 999");
    }
}
```

## 컨트롤러 테스트
```java
@WebMvcTest(UserController.class)
class UserControllerTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private UserService userService;
    
    @Test
    @DisplayName("사용자 생성 API 테스트")
    void createUser_Success() throws Exception {
        // Given
        UserCreateRequest request = new UserCreateRequest("user1", "user1@test.com", "password123");
        UserResponse response = UserResponse.builder()
                .id(1L)
                .username("user1")
                .email("user1@test.com")
                .build();
        
        when(userService.createUser(any(UserCreateRequest.class))).thenReturn(response);
        
        // When & Then
        mockMvc.perform(post("/api/users")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.username").value("user1"))
                .andExpect(jsonPath("$.email").value("user1@test.com"));
    }
}
```

## 통합 테스트
```java
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
@TestPropertySource(properties = {
    "spring.datasource.url=jdbc:h2:mem:testdb",
    "spring.sql.init.mode=always"
})
class UserIntegrationTest {
    
    @Autowired
    private TestRestTemplate restTemplate;
    
    @Test
    @DisplayName("사용자 생성부터 조회까지 통합 테스트")
    void userLifecycle_IntegrationTest() {
        // Given
        UserCreateRequest request = new UserCreateRequest("testuser", "test@test.com", "password123");
        
        // When - 사용자 생성
        ResponseEntity<UserResponse> createResponse = restTemplate.postForEntity(
            "/api/users", request, UserResponse.class);
        
        // Then - 생성 확인
        assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(createResponse.getBody().getUsername()).isEqualTo("testuser");
        
        // When - 사용자 조회
        Long userId = createResponse.getBody().getId();
        ResponseEntity<UserResponse> getResponse = restTemplate.getForEntity(
            "/api/users/" + userId, UserResponse.class);
        
        // Then - 조회 확인
        assertThat(getResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(getResponse.getBody().getUsername()).isEqualTo("testuser");
    }
}
```

## 테스트 실행
```bash
# 모든 테스트 실행
./gradlew test

# 특정 테스트 클래스 실행
./gradlew test --tests UserServiceTest

# 통합 테스트만 실행
./gradlew test --tests "*Integration*"
```

## 테스트 네이밍 규칙
- **메서드명**: `{테스트대상}_{상황}_{예상결과}` (예: `createUser_Success`, `getUser_NotFound_ThrowsException`)
- **DisplayName**: 한글로 명확한 테스트 목적 설명
- **Given-When-Then**: 테스트 구조 명확히 구분

## Mock 사용 가이드
- `@Mock`: 의존성 모킹
- `@InjectMocks`: 테스트 대상 객체
- `@MockBean`: Spring Context에서 Bean 모킹
- `when().thenReturn()`: 메서드 호출 결과 설정
- `verify()`: 메서드 호출 검증