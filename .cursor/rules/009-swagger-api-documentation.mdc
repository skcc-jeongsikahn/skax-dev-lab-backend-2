---
globs: **/controller/*.java,**/dto/*.java
description: Swagger/OpenAPI 3 API 문서화 가이드
---

# Swagger/OpenAPI 3 API 문서화 가이드

## 기술 스택
- **springdoc-openapi-starter-webmvc-ui**: 2.7.0
- **Spring Boot**: 3.4.1 호환
- **OpenAPI**: 3.0 스펙

**중요**: Spring Boot 3.4.x와 호환되려면 springdoc-openapi 2.7.0 이상을 사용해야 합니다.

## Controller 어노테이션 패턴

### 기본 Controller 구조
```java
@Tag(name = "User", description = "사용자 관리 API")
@RestController
@RequestMapping("/users")
@RequiredArgsConstructor
@SecurityRequirement(name = "Bearer Authentication")
public class UserController {
    // ...
}
```

### API 메서드 어노테이션
```java
@Operation(summary = "사용자 생성", description = "새로운 사용자를 생성합니다.")
@ApiResponses(value = {
    @ApiResponse(responseCode = "201", description = "사용자 생성 성공",
            content = @Content(schema = @Schema(implementation = UserResponse.class))),
    @ApiResponse(responseCode = "400", description = "잘못된 요청 데이터"),
    @ApiResponse(responseCode = "409", description = "이미 존재하는 이메일")
})
@PostMapping
public ResponseEntity<UserResponse> createUser(
        @Parameter(description = "사용자 생성 요청 정보", required = true)
        @Valid @RequestBody UserCreateRequest request) {
    // 구현
}
```

## DTO 어노테이션 패턴

### Request DTO
```java
@Schema(description = "사용자 생성 요청")
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class UserCreateRequest {

    @Schema(description = "사용자명", example = "user123", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank(message = "사용자명은 필수입니다")
    private String username;

    @Schema(description = "이메일 주소", example = "user@example.com", requiredMode = Schema.RequiredMode.REQUIRED)
    @Email(message = "올바른 이메일 형식이 아닙니다")
    private String email;
}
```

### Response DTO
```java
@Schema(description = "사용자 응답")
@Getter
@Builder
public class UserResponse {

    @Schema(description = "사용자 ID", example = "1")
    private Long id;

    @Schema(description = "사용자명", example = "user123")
    private String username;

    @Schema(description = "이메일", example = "user@example.com")
    private String email;
}
```

## Security 설정

### JWT 인증 필요한 API
```java
@SecurityRequirement(name = "Bearer Authentication")
@PostMapping("/secure-endpoint")
public ResponseEntity<?> secureEndpoint() {
    // JWT 토큰이 필요한 API
}
```

### 인증 불필요한 API (이미 permitAll 설정된 경우)
```java
// @SecurityRequirement 어노테이션 없이 사용
@PostMapping("/login")
public ResponseEntity<LoginResponse> login(@Valid @RequestBody LoginRequest request) {
    // 로그인 등 인증 불필요한 API
}
```

## HTTP 상태 코드 가이드

### 표준 응답 코드
- `200 OK`: 성공적인 조회/수정
- `201 Created`: 리소스 생성 성공
- `400 Bad Request`: 잘못된 요청 데이터
- `401 Unauthorized`: 인증 실패
- `403 Forbidden`: 권한 없음
- `404 Not Found`: 리소스 없음
- `409 Conflict`: 리소스 충돌 (중복 등)
- `500 Internal Server Error`: 서버 오류

### ApiResponse 예시
```java
@ApiResponses(value = {
    @ApiResponse(responseCode = "200", description = "조회 성공",
            content = @Content(schema = @Schema(implementation = UserResponse.class))),
    @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없음",
            content = @Content(schema = @Schema(implementation = ErrorResponse.class))),
    @ApiResponse(responseCode = "401", description = "인증 필요")
})
```

## Parameter 어노테이션

### Path Variable
```java
@GetMapping("/{id}")
public ResponseEntity<UserResponse> getUser(
        @Parameter(description = "사용자 ID", required = true, example = "1")
        @PathVariable Long id) {
    // 구현
}
```

### Query Parameter
```java
@GetMapping
public ResponseEntity<List<UserResponse>> getUsers(
        @Parameter(description = "페이지 번호", example = "0")
        @RequestParam(defaultValue = "0") int page,
        @Parameter(description = "페이지 크기", example = "10")
        @RequestParam(defaultValue = "10") int size) {
    // 구현
}
```

### Request Body
```java
@PostMapping
public ResponseEntity<UserResponse> createUser(
        @Parameter(description = "사용자 생성 요청 정보", required = true)
        @Valid @RequestBody UserCreateRequest request) {
    // 구현
}
```

## Tag 분류 가이드

### 도메인별 Tag 분류
- `Authentication`: 인증 관리 API
- `User`: 사용자 관리 API
- `Vehicle`: 차량 관리 API
- `Garage`: 정비소 관리 API
- `Reservation`: 예약 관리 API
- `Payment`: 결제 관리 API
- `Review`: 리뷰 관리 API
- `Admin`: 관리자 API

## 접근 경로

### 로컬 개발 환경
- **Swagger UI**: `http://localhost:8080/api/swagger-ui.html`
- **API Docs**: `http://localhost:8080/api/v3/api-docs`
- **H2 Console**: `http://localhost:8080/api/h2-console`

### 환경별 설정
- **local**: Swagger 활성화
- **dev**: Swagger 활성화
- **prod**: Swagger 비활성화 (보안)

## 예제 코드

### 완전한 Controller 예시
```java
@Tag(name = "Authentication", description = "인증 관리 API")
@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {

    @Operation(summary = "로그인", description = "사용자 로그인을 처리하고 JWT 토큰을 발급합니다.")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "로그인 성공",
                content = @Content(schema = @Schema(implementation = LoginResponse.class))),
        @ApiResponse(responseCode = "401", description = "인증 실패")
    })
    @PostMapping("/login")
    public ResponseEntity<LoginResponse> login(
            @Parameter(description = "로그인 요청 정보", required = true)
            @Valid @RequestBody LoginRequest request) {
        LoginResponse response = authService.login(request);
        return ResponseEntity.ok(response);
    }
}
```

## 주의사항

1. **보안**: 운영 환경에서는 Swagger를 비활성화하여 API 노출 방지
2. **예시 데이터**: 실제 운영 데이터가 아닌 가상의 예시 데이터 사용
3. **한글 설명**: description은 한글로 작성하여 이해도 향상
4. **일관성**: 같은 도메인 내에서 일관된 어노테이션 패턴 사용
5. **필수 여부**: requiredMode를 명확히 지정하여 API 사용성 향상