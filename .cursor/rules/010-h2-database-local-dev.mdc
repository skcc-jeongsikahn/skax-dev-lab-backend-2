# H2 Database Configuration for Local Development

## Overview
Local 개발 환경에서 H2 인메모리 데이터베이스 사용 시 필요한 설정과 주의사항을 정리한 가이드입니다.

## 1. Profile Configuration

### Local 환경 설정 (`application-local.yml`)
```yaml
spring:
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:carcenter_local;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    username: sa
    password: 
  
  flyway:
    enabled: false  # H2에서는 Flyway 비활성화
  
  sql:
    init:
      mode: always
      schema-locations: classpath:schema-h2.sql
      data-locations: classpath:data-h2.sql
  
  h2:
    console:
      enabled: true
      path: /h2-console
```

## 2. H2 Schema File Requirements

### 파일 위치
- `src/main/resources/schema-h2.sql`
- `src/main/resources/data-h2.sql`

### 필수 SQL 구문 규칙
1. **테이블 생성**: `CREATE TABLE IF NOT EXISTS` 사용
2. **Primary Key**: `BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY`
3. **Boolean 기본값**: `BOOLEAN NOT NULL DEFAULT TRUE` (대문자 TRUE)
4. **인덱스 생성**: `CREATE INDEX IF NOT EXISTS` 사용
5. **외래키**: `CONSTRAINT` 명시적 이름 지정

### 올바른 예시
```sql
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
```

## 3. H2 vs PostgreSQL 차이점

| 항목 | PostgreSQL | H2 |
|------|------------|-----|
| AUTO_INCREMENT | SERIAL | GENERATED BY DEFAULT AS IDENTITY |
| Boolean 기본값 | true | TRUE |
| ENUM 타입 | 지원 | VARCHAR로 처리 |
| PL/pgSQL 함수 | 지원 | 미지원 |
| 트리거 함수 | 지원 | 제한적 |

## 4. YAML 설정 주의사항

### 중복 키 방지
- 같은 YAML 파일 내에서 `spring:` 키 중복 금지
- 파일 업로드 설정은 기존 `spring:` 섹션 내부에 통합

### 올바른 설정 예시
```yaml
spring:
  datasource:
    # ... datasource 설정
  
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      enabled: true
  
  security:
    # ... security 설정
```

## 5. 개발 환경별 데이터베이스 전략

| 환경 | 데이터베이스 | 스키마 관리 | 용도 |
|------|-------------|------------|------|
| Local | H2 인메모리 | SQL 초기화 | 개발/테스트 |
| Dev | PostgreSQL | Flyway | 개발 서버 |
| Prod | PostgreSQL | Flyway | 운영 서버 |
| Test | H2 인메모리 | 테스트용 스키마 | 단위/통합 테스트 |

## 6. 트러블슈팅 체크리스트

### 애플리케이션 시작 실패 시 확인사항
1. ✅ YAML 파일에 중복 키(`spring:`) 없는지 확인
2. ✅ H2 스키마 파일의 SQL 구문이 H2 호환인지 확인
3. ✅ Flyway가 local 프로파일에서 `enabled: false`인지 확인
4. ✅ 테이블 생성 시 `IF NOT EXISTS` 사용 여부 확인
5. ✅ IDENTITY 구문: `GENERATED BY DEFAULT AS IDENTITY` 사용 확인
6. ✅ Boolean 기본값이 대문자 `TRUE` 사용 확인

### 일반적인 오류와 해결방법
- **DuplicateKeyException**: YAML 중복 키 → 하나의 `spring:` 섹션으로 통합
- **SQL Syntax Error**: PostgreSQL 구문 → H2 호환 구문으로 변경
- **Flyway Migration Error**: Flyway 활성화 → `flyway.enabled: false` 설정

## 7. 명령어 및 접속 정보

### 애플리케이션 실행
```bash
# Local 프로파일로 실행
./gradlew bootRun --args='--spring.profiles.active=local'

# Clean 빌드 후 실행 (문제 발생 시)
./gradlew clean bootRun --args='--spring.profiles.active=local'
```

### H2 콘솔 접속
- **URL**: `http://localhost:8080/api/h2-console`
- **JDBC URL**: `jdbc:h2:mem:carcenter_local`
- **Username**: `sa`
- **Password**: (빈 값)

## 8. 초기 데이터 설정

### 기본 사용자 계정
- `admin` / `admin@carcenter.com` / SYSTEM_ADMIN
- `customer1` / `customer1@example.com` / CUSTOMER  
- `garage_staff` / `staff@garage.com` / GARAGE_STAFF
- `garage_admin` / `admin@garage.com` / GARAGE_ADMIN

### 공통 비밀번호
- 모든 테스트 계정: `password` (BCrypt 해시됨)

## 9. 보안 주의사항

⚠️ **중요**: 
- H2 콘솔은 개발 환경에서만 사용
- 프로덕션 환경에서는 절대 H2 사용 금지
- 운영 환경에서는 반드시 PostgreSQL + Flyway 사용

## 10. 관련 파일 목록

### 필수 파일
- `src/main/resources/application-local.yml`
- `src/main/resources/schema-h2.sql`
- `src/main/resources/data-h2.sql`

### 참조 파일
- `src/main/resources/application.yml` (기본 설정)
- `src/test/resources/application-test.yml` (테스트 설정)
- `src/test/resources/schema-test.sql` (테스트용 스키마)