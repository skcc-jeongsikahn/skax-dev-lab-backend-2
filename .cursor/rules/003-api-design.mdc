---
globs: **/controller/*.java,**/dto/*.java
description: RESTful API 설계 가이드라인
---

# RESTful API 설계 가이드

## URL 설계 규칙
```
GET    /api/users          # 사용자 목록 조회
GET    /api/users/{id}     # 특정 사용자 조회
POST   /api/users          # 사용자 생성
PUT    /api/users/{id}     # 사용자 전체 수정
PATCH  /api/users/{id}     # 사용자 부분 수정
DELETE /api/users/{id}     # 사용자 삭제
```

## HTTP 상태 코드
- `200 OK`: 성공적인 조회/수정
- `201 Created`: 리소스 생성 성공
- `400 Bad Request`: 클라이언트 요청 오류
- `401 Unauthorized`: 인증 실패
- `403 Forbidden`: 권한 없음
- `404 Not Found`: 리소스 없음
- `500 Internal Server Error`: 서버 오류

## 응답 형식
```java
// 성공 응답
public ResponseEntity<UserResponse> createUser(@Valid @RequestBody UserCreateRequest request) {
    UserResponse response = userService.createUser(request);
    return ResponseEntity.status(HttpStatus.CREATED).body(response);
}

// 목록 조회 응답
public ResponseEntity<List<UserResponse>> getUsers() {
    List<UserResponse> responses = userService.getUsers();
    return ResponseEntity.ok(responses);
}
```

## DTO 설계
```java
// Request DTO - 입력 검증 필수
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class UserCreateRequest {
    @NotBlank(message = "사용자명은 필수입니다")
    private String username;
    
    @Email(message = "올바른 이메일 형식이 아닙니다")
    private String email;
}

// Response DTO - 민감정보 제외
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserResponse {
    private Long id;
    private String username;
    private String email;
    // password 필드 제외
    
    public static UserResponse from(User user) {
        return UserResponse.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .build();
    }
}
```

## 인증 API
```java
// 로그인: POST /api/auth/login
// 토큰 갱신: POST /api/auth/refresh
// 로그아웃: POST /api/auth/logout
```

## 헤더 규칙
- Authorization: `Bearer {accessToken}`
- Content-Type: `application/json`